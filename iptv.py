# iptv.py ‚Äî IPTV-—Å–µ—Ä–≤–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–≤—É–∫–∞ (AAC) –¥–ª—è —Å—Ç–∞—Ä—ã—Ö Smart TV
import re
import subprocess
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –º–æ–¥—É–ª—è
from libs import slugify

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
PLAYLIST_FILE = "playlist.m3u"
HOST = "0.0.0.0"
PORT = 8083

def parse_m3u(file_path):
    """–ü–∞—Ä—Å–∏—Ç M3U –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å: {safe_name.ts: url}"""
    channels = {}
    with open(file_path, 'r', encoding='utf-8') as f:
        lines = f.readlines()

    name = None
    for line in lines:
        line = line.strip()
        if line.startswith("#EXTINF:"):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            match = re.search(r',([^,]+)$', line)
            if match:
                name = match.group(1).strip()
        elif line.startswith("http://") or line.startswith("https://"):
            if name:
                # –°–æ–∑–¥–∞—ë–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                safe_name = slugify(name)  # ‚Üê –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ libs.py
                channels[safe_name] = line
                name = None
    return channels

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª—ã
channels = parse_m3u(PLAYLIST_FILE)
print(f"\n[+] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}")
for cname in channels:
    print(f"    ‚Üí {cname}")
print(f"\n[‚ñ∂] –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ http://<–≤–∞—à_IP>:{PORT}/")
print("    –ü—Ä–∏–º–µ—Ä: http://192.168.0.150:8083/Perviy_Kanal.ts\n")

class IPTVHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        path = self.path.lstrip("/")
        if path in channels:
            self.send_response(200)
            self.send_header("Content-Type", "video/mpeg")
            self.send_header("Cache-Control", "no-cache")
            self.send_header("Connection", "close")
            self.end_headers()

            stream_url = channels[path]
            print(f"[‚ñ∂] –ó–∞–ø—É—Å–∫ –∫–∞–Ω–∞–ª–∞: {path} ‚Üí {stream_url}")

            # –ö–æ–º–∞–Ω–¥–∞ FFmpeg: –∫–æ–ø–∏—Ä—É–µ–º –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ ‚Üí AAC
            cmd = [
                "ffmpeg",
                "-user_agent", "Mozilla/5.0 (SmartHub; Samsung B Series) AppleWebKit/537.43",
                "-i", stream_url,
                "-c:v", "copy",           # –ö–æ–ø–∏—Ä—É–µ–º –≤–∏–¥–µ–æ (–±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è)
                "-c:a", "aac",            # –ü–µ—Ä–µ–∫–æ–¥–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ AAC
                "-b:a", "128k",           # –ë–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ
                "-ar", "48000",           # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
                "-f", "mpegts",           # –§–æ—Ä–º–∞—Ç MPEG-TS
                "-flush_packets", "1",
                "-safe", "0",
                "pipe:1"                  # –í—ã–≤–æ–¥ –≤ stdout
            ]

            try:
                ffmpeg = subprocess.Popen(
                    cmd,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.DEVNULL,  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞.PIPE –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    bufsize=65536
                )

                def cleanup():
                    if ffmpeg.poll() is None:
                        ffmpeg.terminate()
                        try:
                            ffmpeg.wait(timeout=3)
                        except:
                            ffmpeg.kill()

                self.connection.set_close_notify_callback(cleanup)

                while True:
                    chunk = ffmpeg.stdout.read(8192)
                    if not chunk:
                        break
                    try:
                        self.wfile.write(chunk)
                        self.wfile.flush()
                    except (ConnectionResetError, BrokenPipeError):
                        break

            except Exception as e:
                print(f"[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ {path}: {e}")
            finally:
                try:
                    if 'ffmpeg' in locals() and ffmpeg.poll() is None:
                        ffmpeg.terminate()
                except:
                    pass

        else:
            self.send_response(404)
            self.end_headers()
            self.wfile.write(b"Channel not found")

if __name__ == "__main__":
    server = HTTPServer((HOST, PORT), IPTVHandler)
    print(f"[‚úÖ] –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT} (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        print("\n\n[üõë] –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")