# iptv.py
# –°–∞–º–æ–ø–∏—Å–Ω—ã–π IPTV-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å—Ç–∞—Ä—ã—Ö Smart TV
# –ü–æ–¥–¥–µ—Ä–∂–∫–∞: H.264 + AAC, —Ç—Ä–∞–Ω—Å–ª–∏—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—ã, —Ä–µ—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è —á–µ—Ä–µ–∑ FFmpeg

import re
import subprocess
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
from libs import slugify

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
PLAYLIST_FILE = "playlist.m3u"      # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É M3U-—Ñ–∞–π–ª—É
HOST = "0.0.0.0"                    # –°–ª—É—à–∞—Ç—å –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
PORT = 8083                         # –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤–∞—à–∏–º)
# ================


def parse_m3u(file_path):
    """–ü–∞—Ä—Å–∏—Ç M3U –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å: {–∏–º—è_—Ñ–∞–π–ª–∞.ts: URL_–ø–æ—Ç–æ–∫–∞}"""
    channels = {}
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
    except FileNotFoundError:
        print(f"[‚ùå] –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {file_path}")
        return {}

    name = None
    for line in lines:
        line = line.strip()
        if line.startswith("#EXTINF:"):
            match = re.search(r',([^,]+)$', line)
            if match:
                name = match.group(1).strip()
        elif line.startswith("http://") or line.startswith("https://"):
            if name:
                safe_name = slugify(name)
                channels[safe_name] = line
                name = None
    return channels


# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª—ã
channels = parse_m3u(PLAYLIST_FILE)

print(f"\n[+] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}")
for cname in channels:
    print(f"    ‚Üí {cname}")

print(f"\n[‚ñ∂] –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É {PORT}...")
print("    –ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏: http://192.168.0.150:8083/perviy_kanal.ts")
print("    –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")


class IPTVHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        path = self.path.lstrip("/")
        if path in channels:
            self.send_response(200)
            self.send_header("Content-Type", "video/mpeg")
            self.send_header("Cache-Control", "no-cache")
            self.send_header("Connection", "close")
            self.end_headers()

            stream_url = channels[path]
            print(f"[‚ñ∂] –ó–∞–ø—É—Å–∫ –∫–∞–Ω–∞–ª–∞: {path} ‚Üí {stream_url}")

            # –ö–æ–º–∞–Ω–¥–∞ FFmpeg: –∫–æ–ø–∏—Ä—É–µ–º –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ ‚Üí AAC
            cmd = [
                "ffmpeg",
                "-user_agent", "Mozilla/5.0 (SmartHub; Samsung B Series) AppleWebKit/537.43",
                "-i", stream_url,
                "-c:v", "copy",           # –ö–æ–ø–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                "-c:a", "aac",            # –ü–µ—Ä–µ–∫–æ–¥–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ AAC (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è TV)
                "-b:a", "128k",           # –ë–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ
                "-ar", "48000",           # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
                "-f", "mpegts",           # –§–æ—Ä–º–∞—Ç MPEG-TS
                "-flush_packets", "1",    # –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
                "pipe:1"                  # –í—ã–≤–æ–¥ –≤ stdout
            ]

            ffmpeg = None
            try:
                ffmpeg = subprocess.Popen(
                    cmd,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.DEVNULL,  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ stderr=PIPE –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    bufsize=65536
                )

                # –ü–æ—Ç–æ–∫–æ–≤–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö
                while True:
                    chunk = ffmpeg.stdout.read(8192)
                    if not chunk:
                        break
                    try:
                        self.wfile.write(chunk)
                        self.wfile.flush()
                    except (ConnectionResetError, BrokenPipeError):
                        print(f"[‚èπ] –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {path}")
                        break

            except Exception as e:
                print(f"[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ {path}: {e}")
            finally:
                # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ FFmpeg
                if ffmpeg and ffmpeg.poll() is None:
                    try:
                        ffmpeg.terminate()
                        try:
                            ffmpeg.wait(timeout=3)
                        except subprocess.TimeoutExpired:
                            ffmpeg.kill()
                    except:
                        pass
        else:
            self.send_response(404)
            self.end_headers()
            self.wfile.write(b"Channel not found")


if __name__ == "__main__":
    try:
        server = HTTPServer((HOST, PORT), IPTVHandler)
        print(f"[‚úÖ] –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{HOST}:{PORT}")
        print("[‚Ñπ] –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n")
        server.serve_forever()
    except KeyboardInterrupt:
        print("\n\n[üõë] –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"[üî•] –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")